// Code generated by MockGen. DO NOT EDIT.
// Source: playground/interfaces (interfaces: User2)

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUser2 is a mock of User2 interface.
type MockUser2 struct {
	ctrl     *gomock.Controller
	recorder *MockUser2MockRecorder
}

// MockUser2MockRecorder is the mock recorder for MockUser2.
type MockUser2MockRecorder struct {
	mock *MockUser2
}

// NewMockUser2 creates a new mock instance.
func NewMockUser2(ctrl *gomock.Controller) *MockUser2 {
	mock := &MockUser2{ctrl: ctrl}
	mock.recorder = &MockUser2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser2) EXPECT() *MockUser2MockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockUser2) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockUser2MockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockUser2)(nil).String))
}

// String2 mocks base method.
func (m *MockUser2) String2() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String2")
	ret0, _ := ret[0].(string)
	return ret0
}

// String2 indicates an expected call of String2.
func (mr *MockUser2MockRecorder) String2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String2", reflect.TypeOf((*MockUser2)(nil).String2))
}
