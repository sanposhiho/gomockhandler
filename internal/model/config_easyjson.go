// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	reflectmode "github.com/sanposhiho/gomockhandler/internal/mockgen/reflectmode"
	sourcemode "github.com/sanposhiho/gomockhandler/internal/mockgen/sourcemode"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeGithubComSanposhihoGomockhandlerInternalModel(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mocks":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Mocks = make(map[string]*Mock)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *Mock
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Mock)
						}
						easyjson6615c02eDecodeGithubComSanposhihoGomockhandlerInternalModel1(in, v1)
					}
					(out.Mocks)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSanposhihoGomockhandlerInternalModel(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mocks\":"
		out.RawString(prefix[1:])
		if in.Mocks == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Mocks {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					easyjson6615c02eEncodeGithubComSanposhihoGomockhandlerInternalModel1(out, *v2Value)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComSanposhihoGomockhandlerInternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComSanposhihoGomockhandlerInternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComSanposhihoGomockhandlerInternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComSanposhihoGomockhandlerInternalModel(l, v)
}
func easyjson6615c02eDecodeGithubComSanposhihoGomockhandlerInternalModel1(in *jlexer.Lexer, out *Mock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "destination":
			out.Destination = string(in.String())
		case "checksum":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.CheckSum[:], in.Bytes())
			}
		case "mode":
			out.Mode = mode(in.String())
		case "reflect_mode_runner":
			if in.IsNull() {
				in.Skip()
				out.ReflectModeRunner = nil
			} else {
				if out.ReflectModeRunner == nil {
					out.ReflectModeRunner = new(reflectmode.Runner)
				}
				easyjson6615c02eDecodeGithubComSanposhihoGomockhandlerInternalMockgenReflectmode(in, out.ReflectModeRunner)
			}
		case "source_mode_runner":
			if in.IsNull() {
				in.Skip()
				out.SourceModeRunner = nil
			} else {
				if out.SourceModeRunner == nil {
					out.SourceModeRunner = new(sourcemode.Runner)
				}
				easyjson6615c02eDecodeGithubComSanposhihoGomockhandlerInternalMockgenSourcemode(in, out.SourceModeRunner)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSanposhihoGomockhandlerInternalModel1(out *jwriter.Writer, in Mock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"destination\":"
		out.RawString(prefix[1:])
		out.String(string(in.Destination))
	}
	if true {
		const prefix string = ",\"checksum\":"
		out.RawString(prefix)
		out.Base64Bytes(in.CheckSum[:])
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	if in.ReflectModeRunner != nil {
		const prefix string = ",\"reflect_mode_runner\":"
		out.RawString(prefix)
		easyjson6615c02eEncodeGithubComSanposhihoGomockhandlerInternalMockgenReflectmode(out, *in.ReflectModeRunner)
	}
	if in.SourceModeRunner != nil {
		const prefix string = ",\"source_mode_runner\":"
		out.RawString(prefix)
		easyjson6615c02eEncodeGithubComSanposhihoGomockhandlerInternalMockgenSourcemode(out, *in.SourceModeRunner)
	}
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComSanposhihoGomockhandlerInternalMockgenSourcemode(in *jlexer.Lexer, out *sourcemode.Runner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			out.Source = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "package":
			out.Package = string(in.String())
		case "imports":
			out.Imports = string(in.String())
		case "aux_files":
			out.AuxFiles = string(in.String())
		case "mock_names":
			out.MockNames = string(in.String())
		case "self_package":
			out.SelfPackage = string(in.String())
		case "copyright_file":
			out.CopyrightFile = string(in.String())
		case "write_pkg_comment":
			if in.IsNull() {
				in.Skip()
				out.WritePkgComment = nil
			} else {
				if out.WritePkgComment == nil {
					out.WritePkgComment = new(bool)
				}
				*out.WritePkgComment = bool(in.Bool())
			}
		case "debug_parser":
			if in.IsNull() {
				in.Skip()
				out.DebugParser = nil
			} else {
				if out.DebugParser == nil {
					out.DebugParser = new(bool)
				}
				*out.DebugParser = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSanposhihoGomockhandlerInternalMockgenSourcemode(out *jwriter.Writer, in sourcemode.Runner) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Source != "" {
		const prefix string = ",\"source\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Source))
	}
	if in.Destination != "" {
		const prefix string = ",\"destination\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Destination))
	}
	if in.Package != "" {
		const prefix string = ",\"package\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Package))
	}
	if in.Imports != "" {
		const prefix string = ",\"imports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Imports))
	}
	if in.AuxFiles != "" {
		const prefix string = ",\"aux_files\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuxFiles))
	}
	if in.MockNames != "" {
		const prefix string = ",\"mock_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MockNames))
	}
	if in.SelfPackage != "" {
		const prefix string = ",\"self_package\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SelfPackage))
	}
	if in.CopyrightFile != "" {
		const prefix string = ",\"copyright_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CopyrightFile))
	}
	if in.WritePkgComment != nil {
		const prefix string = ",\"write_pkg_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.WritePkgComment))
	}
	if in.DebugParser != nil {
		const prefix string = ",\"debug_parser\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.DebugParser))
	}
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComSanposhihoGomockhandlerInternalMockgenReflectmode(in *jlexer.Lexer, out *reflectmode.Runner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "package_name":
			out.PackageName = string(in.String())
		case "interfaces":
			out.Interfaces = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "package":
			out.Package = string(in.String())
		case "imports":
			out.Imports = string(in.String())
		case "aux_files":
			out.AuxFiles = string(in.String())
		case "build_flags":
			out.BuildFlags = string(in.String())
		case "mock_names":
			out.MockNames = string(in.String())
		case "self_package":
			out.SelfPackage = string(in.String())
		case "copyright_file":
			out.CopyrightFile = string(in.String())
		case "exec_only":
			out.ExecOnly = string(in.String())
		case "prog_only":
			if in.IsNull() {
				in.Skip()
				out.ProgOnly = nil
			} else {
				if out.ProgOnly == nil {
					out.ProgOnly = new(bool)
				}
				*out.ProgOnly = bool(in.Bool())
			}
		case "write_pkg_comment":
			if in.IsNull() {
				in.Skip()
				out.WritePkgComment = nil
			} else {
				if out.WritePkgComment == nil {
					out.WritePkgComment = new(bool)
				}
				*out.WritePkgComment = bool(in.Bool())
			}
		case "debug_parser":
			if in.IsNull() {
				in.Skip()
				out.DebugParser = nil
			} else {
				if out.DebugParser == nil {
					out.DebugParser = new(bool)
				}
				*out.DebugParser = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComSanposhihoGomockhandlerInternalMockgenReflectmode(out *jwriter.Writer, in reflectmode.Runner) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PackageName != "" {
		const prefix string = ",\"package_name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.PackageName))
	}
	if in.Interfaces != "" {
		const prefix string = ",\"interfaces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Interfaces))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.Destination != "" {
		const prefix string = ",\"destination\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Destination))
	}
	if in.Package != "" {
		const prefix string = ",\"package\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Package))
	}
	if in.Imports != "" {
		const prefix string = ",\"imports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Imports))
	}
	if in.AuxFiles != "" {
		const prefix string = ",\"aux_files\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AuxFiles))
	}
	if in.BuildFlags != "" {
		const prefix string = ",\"build_flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BuildFlags))
	}
	if in.MockNames != "" {
		const prefix string = ",\"mock_names\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MockNames))
	}
	if in.SelfPackage != "" {
		const prefix string = ",\"self_package\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SelfPackage))
	}
	if in.CopyrightFile != "" {
		const prefix string = ",\"copyright_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CopyrightFile))
	}
	if in.ExecOnly != "" {
		const prefix string = ",\"exec_only\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExecOnly))
	}
	if in.ProgOnly != nil {
		const prefix string = ",\"prog_only\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.ProgOnly))
	}
	if in.WritePkgComment != nil {
		const prefix string = ",\"write_pkg_comment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.WritePkgComment))
	}
	if in.DebugParser != nil {
		const prefix string = ",\"debug_parser\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.DebugParser))
	}
	out.RawByte('}')
}
